import fs from "fs/promises"
import { dirname, join } from "path"
import { fileURLToPath } from "url"
import { Config, initCtx } from "./config"
import { generateAst, loadSchema } from "./generator"
import { formatCode, printCode } from "./printer"

export const apigen = async (config: Partial<Config> & Pick<Config, "source" | "output">) => {
  const doc = await loadSchema({ url: config.source, headers: config.headers })
  const ctx = initCtx({ ...config, doc })
  const { clientMembers, types } = await generateAst(ctx)

  const filepath = join(dirname(fileURLToPath(import.meta.url)), "_template.ts")
  const file = await fs.readFile(filepath, "utf-8")

  let code = [
    `// Auto-generated by https://github.com/vladkens/apigen-ts`,
    `// Source: ${config.source}\n`,
    // remove all comments expect which starts with "// apigen:"
    ...file.split("\n").filter((x) => !/\s*\/\/\s(?!apigen:)/.test(x)),
  ].join("\n")

  if (!ctx.parseDates) {
    code = code.replace(/\s*ISO_FORMAT\s=.+$/gm, "")
    code = code.replace(/PopulateDates.+?\n\s{2}\}/s, "")
    code = code.replace(/this.PopulateDates\((.+)\)/, "$1")
  }

  code = code.replace("// apigen:clientMembers", printCode(clientMembers))
  code = code.replace("// apigen:types", printCode(types))
  code = code.replace("class ApiClient", `class ${ctx.name}`)

  const result = await formatCode(code)
  if (config.output === null) {
    process.stdout.write(result)
  } else {
    await fs.mkdir(dirname(config.output), { recursive: true })
    await fs.writeFile(config.output, result)
  }
}
